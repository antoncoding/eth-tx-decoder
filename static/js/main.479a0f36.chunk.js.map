{"version":3,"sources":["aragonui-logo.png","Components/Decoder.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Web3","require","rlp","web3","Decoder","useState","hash","setHash","hex","setTxHex","from","setFrom","to","setTo","nonce","setNonce","gas","setGas","gasPrice","setGasPrice","value","setValue","data","setData","parseBufToInt","buf","parseInt","toString","heading","padding","primary","label","wide","onChange","event","target","secondary","onClick","b","decode","gasPriceGWei","utils","fromWei","gasLimit","bytesToHex","toChecksumAddress","eth","accounts","recoverTransaction","keccak256","error","header","title","transaction","shorten","address","message","App","sidePanelOpened","setSidePanelOpened","opened","onClose","style","fontSize","window","open","showFocusRing","paddingLeft","alignContent","alignItems","width","src","AragonUILogo","alt","paddingTop","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.479a0f36.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/aragonui-logo.c72415d5.png\";","import React, { useState } from 'react';\nimport {\n  Box,\n  TextInput,\n  Button,\n  Split,\n  AddressField,\n  TransactionBadge,\n  TextCopy,\n  Table,\n  TableHeader,\n  TableRow,\n  TableCell,\n  Text,\n} from '@aragon/ui';\n\nconst Web3 = require('web3');\nconst rlp = require('rlp');\nconst web3 = new Web3();\n\nexport default function Decoder() {\n  const [hash, setHash] = useState('');\n  const [hex, setTxHex] = useState(\n    '0xf86e830c590f8502cb41780082f61894baf99ed5b5663329fa417953007afcc60f06f78187637aade5f00c008026a0235bbb2ffc4915daacee02a17d4527b688c853512776798756271d1a83c46ffaa079e2acba2ef48e510e9bef300e2ca79134869fa5775b2cec22eb4db09dd78164'\n  );\n\n  const [from, setFrom] = useState('');\n  const [to, setTo] = useState('');\n  const [nonce, setNonce] = useState(-1);\n  const [gas, setGas] = useState(-1);\n  const [gasPrice, setGasPrice] = useState(-1);\n  const [value, setValue] = useState(-1);\n  const [data, setData] = useState('0x00');\n\n  function parseBufToInt(buf) {\n    return parseInt(buf.toString('hex'), 16);\n  }\n\n  function decodeTx() {\n    try {\n      const b = rlp.decode(hex);\n\n      const nonce = parseBufToInt(b[0]);\n      setNonce(nonce);\n      const gasPriceGWei = web3.utils.fromWei(b[1].toString('hex'), 'gwei');\n      setGasPrice(gasPriceGWei);\n\n      const gasLimit = parseBufToInt(b[2]);\n      setGas(gasLimit);\n\n      const to = web3.utils.bytesToHex(b[3]);\n      setTo(web3.utils.toChecksumAddress(to));\n\n      const value = web3.utils.fromWei(b[4].toString('hex'), 'ether'); // ETH\n      setValue(value);\n      const data = web3.utils.bytesToHex(b[5]);\n      setData(data);\n\n      const from = web3.eth.accounts.recoverTransaction(hex);\n      setFrom(from);\n\n      setHash(web3.utils.keccak256(hex));\n    } catch (error) {\n      setHash(error)\n      setFrom('')\n      setTo('')\n      setNonce(-1)\n      setGas(-1)\n      setGasPrice(-1)\n      setValue(-1)\n      setData('0x0')\n    }\n  }\n\n  return (\n    <>\n      <Box heading={'Raw ETHEREUM tx'} padding={50}>\n        <Split\n          primary={\n            <>\n              <TextInput\n                label={'Raw'}\n                value={hex}\n                wide={true}\n                onChange={(event) => setTxHex(event.target.value)}\n              />\n            </>\n          }\n          secondary={\n            <>\n              <Button label='Decode' onClick={decodeTx} />\n            </>\n          }\n        />\n        \n        <Table\n          header={\n            <TableRow>\n              <TableHeader title='detail' />\n            </TableRow>\n          }\n        >\n          <TableRow>\n            <TableCell>\n              <Text>Tx Id</Text>\n            </TableCell>\n            <TableCell>\n              { hash === '' ? '' : <TransactionBadge transaction={hash} shorten={false} /> }\n              \n            </TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>\n              <Text>From</Text>\n            </TableCell>\n            <TableCell>\n              <AddressField address={from} />\n            </TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>\n              <Text>To</Text>\n            </TableCell>\n            <TableCell>\n              <AddressField address={to} />\n              {/* <Text>{to}</Text> */}\n            </TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>\n              <Text>Nonce</Text>\n            </TableCell>\n            <TableCell>\n              <Text>{ nonce !== -1 ? nonce : '' }</Text>\n            </TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>\n              <Text>Gas</Text>\n            </TableCell>\n            <TableCell>\n              <Text>{gas !== -1 ? gas : ''}</Text>\n            </TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>\n              <Text>Gas Price</Text>\n            </TableCell>\n            <TableCell>\n              <Text>{gasPrice !== -1 ? `${gasPrice} GWei` :  ''}  </Text>\n            </TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>\n              <Text>Value</Text>\n            </TableCell>\n            <TableCell>\n              <Text>{value !== -1 ? `${value} eth` :  ''}  </Text>\n            </TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>\n              <Text>Data</Text>\n            </TableCell>\n            <TableCell>\n              <TextCopy message={'Data field copied'} value={data} />\n              {/* <Text>{data}</Text> */}\n            </TableCell>\n          </TableRow>\n        </Table>\n      </Box>\n    </>\n  );\n}\n","import React, { useState } from 'react';\nimport Decoder from './Components/Decoder';\n\nimport AragonUILogo from './aragonui-logo.png';\nimport {\n  Main,\n  Header,\n  SidePanel,\n  Box,\n  ButtonBase,\n  Button,\n  AddressField,\n  PublicUrl,\n} from '@aragon/ui';\n\nimport './App.css';\n\nfunction App() {\n  const [sidePanelOpened, setSidePanelOpened] = useState(false);\n\n  return (\n    <Main>\n      <Header\n        primary={<></>}\n        secondary={\n          <Button\n            // mode='strong'\n            label='Learn More'\n            onClick={() => {\n              setSidePanelOpened(true);\n            }}\n          />\n        }\n      />\n      <Decoder />\n      <SidePanel opened={sidePanelOpened} onClose={() => setSidePanelOpened(false)}>\n        <div style={{ padding: 20, fontSize: 15 }}> Powered By </div>\n\n        <Box>\n          <ButtonBase\n            onClick={() => {\n              window.open('https://ui.aragon.org/', '_blank');\n            }}\n            showFocusRing={false}\n          >\n            <div style={{ paddingLeft: '5%', alignContent: 'center', alignItems: 'center' }}>\n              <img width={300} src={AragonUILogo} alt='aragon-ui'></img>\n            </div>\n          </ButtonBase>\n        </Box>\n\n        <div style={{  padding: 20, paddingTop:60, fontSize: 15 }}> Donate </div>\n        <AddressField address={'0x81bb32e4A7e4d0500d11A52F3a5F60c9A6Ef126C'} />\n\n        <div style={{ padding: 20, fontSize: 15 }}> Source Code </div>\n        <ButtonBase\n            onClick={() => {\n              window.open('https://github.com/antoncoding/eth-tx-decoder', '_blank');\n            }}\n            showFocusRing={false}\n          >\n            <Box>\n            Visit GitHub\n            </Box>\n            \n          </ButtonBase>\n      </SidePanel>\n    </Main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}